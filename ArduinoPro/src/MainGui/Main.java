/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package MainGui;

import static MainGui.TestClass.input;
import Method.SerialClass;
import javax.swing.DefaultListModel;
import jssc.SerialPortList;

/**
 *
 * @author faysal
 */



import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStream;
import gnu.io.CommPortIdentifier;
import gnu.io.SerialPort;
import gnu.io.SerialPortEvent;
import gnu.io.SerialPortEventListener;
import java.util.Enumeration;


import java.io.IOException;
import javax.swing.JOptionPane;
 

 class TestClass
{
 public static BufferedReader input;
 public static OutputStream output;
 
 public synchronized void writeData(int data) {
     
     input = SerialClass.input;
 output = SerialClass.output;
 
 System.out.println("Sent: " + data);
 
 try {
	 byte ddi=(byte)data;
 output.write(ddi);
 } catch (Exception e) {
 System.out.println("could not write to port// "+e);
 }
 }
 
 
}


public class Main extends javax.swing.JFrame {

    /**
     * Creates new form Main
     */
    
     String[] portNames = SerialPortList.getPortNames();
     public static BufferedReader input;
     public static OutputStream output;
     SerialClass obj = new SerialClass();
     TestClass testClass  =new TestClass();
 
    public Main() {
        initComponents();
        availablePorts();
        fillCombo();
    }

    void initPort(String port)
    {
    
    obj.initialize(port);
    }
    public  void Connect ()
 {
     String selectedPort=(String) portScombo.getSelectedItem();
     obj.close();
    
     if((!selectedPort.equals("No Item")))
 if(onButton.isSelected()){
     onButton.setText("On");
   
        
        if(!selectedPort.equals("No Item"))
        {
            initPort(selectedPort);
        }
        else
            System.out.println(selectedPort);
 try
 {
     
 
 
 int c=0;
 
 input = SerialClass.input;
 output = SerialClass.output;
// InputStreamReader Ir = new InputStreamReader(System.in);
// BufferedReader Br = new BufferedReader(Ir);
 
 {
 System.out.println("LED ON / OFF MENU.");
 System.out.println("1.LED ON");
 System.out.println("2.LED OFF");
 System.out.print("Enter your choice :");
 
 if(onButton.isSelected())
 {
 c=1;
 }
 else
 {
 c=0;
 obj.close();
 }
 switch(c)
 {
 case 1:
 testClass.writeData(131);
 break;
 
 case 2:
 testClass.writeData(130);
 break;
 
 case 3:
 System.exit(0);
 }
 }
 
 
// String inputLine=input.readLine();
// System.out.println(inputLine);
 
 
 
 }
 catch(Exception e){}
 }
 else
 {
     onButton.setText("OFF");
     System.out.println("On is not selected");
     /*
     String selectedPort=(String) portScombo.getSelectedItem();
        
        if(!selectedPort.equals("No Item"))
        {
            initPort(selectedPort);
        }
        else
            System.out.println(selectedPort);
 try
 {
     
 
 
 int c=0;
 
 input = SerialClass.input;
 output = SerialClass.output;
// InputStreamReader Ir = new InputStreamReader(System.in);
// BufferedReader Br = new BufferedReader(Ir);
 
 {
 System.out.println("LED ON / OFF MENU.");
 System.out.println("1.LED ON");
 System.out.println("2.LED OFF");
 System.out.print("Enter your choice :");
 
 if(!onButton.isSelected())
 {
 c=1;
 }
 else
 {
 c=0;
 obj.close();
 }
 switch(c)
 {
 case 1:
 testClass.writeData(1);
 break;
 
 case 2:
 testClass.writeData(0);
 break;
 
 case 3:
 System.exit(0);
 }
 }
 }
 catch(Exception e){}
 */}
     else
     {
         JOptionPane.showMessageDialog(null, "Please Select Right Port.. to proceed...");
         onButton.setSelected(false);
     }
 }
    public void availablePorts()
    {
       
	        for(int i = 0; i < portNames.length; i++){
	            System.out.println(portNames[i]);
	        }
                DefaultListModel dlm=new DefaultListModel();
                for(String st:portNames)
                {
                    dlm.addElement(st);
                }
                
                aList.setModel(dlm);
    }
    
    public void fillCombo()
    {
        for(String st:portNames)
        portScombo.addItem(st);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        portScombo = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        onButton = new javax.swing.JRadioButton();
        p13 = new javax.swing.JCheckBox();
        p12 = new javax.swing.JCheckBox();
        p11 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        aList = new javax.swing.JList();
        jLabel4 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Arduino Controller");
        setResizable(false);

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Available Ports :");

        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Select Port :");

        portScombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "No Item" }));
        portScombo.setToolTipText("Select Correct Port ...");
        portScombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portScomboActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(portScombo, 0, 166, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(portScombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel3.setToolTipText("Select Right Port ... Otherwise it will not work...");

        onButton.setText("OFF");
        onButton.setToolTipText("Press To Turn On / Off");
        onButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onButtonActionPerformed(evt);
            }
        });

        p13.setText("13 --- Pin");
        p13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p13ActionPerformed(evt);
            }
        });

        p12.setText("12 --- Pin");

        p11.setText("11 --- Pin");

        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Press to Turn On / Off");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(p11, javax.swing.GroupLayout.DEFAULT_SIZE, 123, Short.MAX_VALUE)
                    .addComponent(p13, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(p12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(onButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(onButton)
                    .addComponent(p13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(p12)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(p11)
                .addContainerGap(48, Short.MAX_VALUE))
        );

        aList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        aList.setToolTipText("Available Port...");
        aList.setEnabled(false);
        jScrollPane2.setViewportView(aList);

        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Roll: 14 & 53; \" NSTU \" ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(21, 21, 21)
                .addComponent(jLabel4)
                .addContainerGap())
        );

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 60, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void p13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p13ActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_p13ActionPerformed

    private void portScomboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portScomboActionPerformed
        // TODO add your handling code here:
       // Connect((String) portScombo.getSelectedItem());
        
       boolean t=true;
       boolean f=false;
        onButton.setSelected(f);
      //  offButton.setSelected(f);
       
        p11.setSelected(f);
        p12.setSelected(f);
        p13.setSelected(f);
        /* 
        String selectedPort=(String) portScombo.getSelectedItem();
        
        if(!selectedPort.equals("No Item"))
        {
            initPort(selectedPort);
        }
        else
            System.out.println(selectedPort);
        */
       
        
    }//GEN-LAST:event_portScomboActionPerformed

    private void onButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onButtonActionPerformed
        // TODO add your handling code here:
       // offButton.setSelected(false);
        Connect();
      
    }//GEN-LAST:event_onButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList aList;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton onButton;
    private javax.swing.JCheckBox p11;
    private javax.swing.JCheckBox p12;
    private javax.swing.JCheckBox p13;
    private javax.swing.JComboBox portScombo;
    // End of variables declaration//GEN-END:variables
}
